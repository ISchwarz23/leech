name: Rust

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    # necessary for windows
    shell: bash

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: test-cargo-registry
      - name: List
        run: find ./
      - name: Run tests
        run: cargo test --verbose

  build:
    strategy:
      fail-fast: false
      matrix:
        # a list of all the targets
        include:
          - TARGET: x86_64-unknown-linux-gnu
            TARGET_NAME: amd64
            OS: ubuntu-latest
          #- TARGET: x86_64-unknown-linux-musl
          #  OS: ubuntu-latest
          - TARGET: aarch64-unknown-linux-gnu
            TARGET_NAME: arm64
            OS: ubuntu-latest
          #- TARGET: aarch64-unknown-linux-musl
          #  OS: ubuntu-latest
          #- TARGET: armv7-unknown-linux-gnueabihf
          #  OS: ubuntu-latest
          #- TARGET: armv7-unknown-linux-musleabihf
          #  OS: ubuntu-latest
          #- TARGET: arm-unknown-linux-gnueabihf
          #  OS: ubuntu-latest
          #- TARGET: arm-unknown-linux-musleabihf
          #  OS: ubuntu-latest
          #- TARGET: x86_64-apple-darwin
          #  OS: macos-latest
          # - TARGET: x86_64-pc-windows-msvc
          #  OS: windows-latest
          - TARGET: aarch64-linux-android
            TARGET_NAME: arm64-android
            OS: ubuntu-latest
            NDK_VERSION: 26.1.10909125
            API_LEVEL: 21
    needs: test
    runs-on: ${{ matrix.OS }}
    env:
      NAME: leech
      TARGET: ${{ matrix.TARGET }}
      TARGET_NAME: ${{ matrix.TARGET_NAME }}
      OS: ${{ matrix.OS }}
      NDK_VERSION: ${{ matrix.NDK_VERSION }}
      API_LEVEL: ${{ matrix.API_LEVEL }}
    steps:
      - uses: actions/checkout@v5
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{matrix.TARGET}}
      - name: List
        run: find ./
      - name: Install and configure dependencies
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf
          fi

          # install NDK
          [[ -n "$NDK_VERSION" ]]; then
            mkdir -p $HOME/android-ndk
            cd $HOME/android-ndk
            curl -sSL https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux.zip -o ndk.zip
            unzip -q ndk.zip
            mv android-ndk-$${NDK_VERSION} ${NDK_VERSION}
          fi

          # some additional configuration for cross-compilation on linux
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-gnu-gcc"
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.armv7-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.aarch64-linux-android]
          ar = "$HOME/android-ndk/${NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ar"
          linker = "$HOME/android-ndk/${NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${API_LEVEL}-clang"
          
          EOF
      - name: Install rust target
        run: rustup target add $TARGET
      - name: Run build
        run: cargo build --release --verbose --target $TARGET
      - name: List target
        run: find ./target
      - name: Compress
        run: |
          mkdir -p ./artifacts
          # windows is the only OS using a different convention for executable file name
          if [[ $OS =~ ^windows.*$ ]]; then
              EXEC=$NAME.exe
          else
              EXEC=$NAME
          fi
          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi
          
          mv ./target/$TARGET/release/$EXEC ./$NAME
      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NAME }}-${{ matrix.TARGET_NAME }}
          path: ${{ env.NAME }}

  # deploys to github releases on tag
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: result
          path: ./artifacts
      - name: List
        run: find ./artifacts
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/*
