name: Test and Cross-Compile App

on:
  push:
    branches: ['**']
  pull_request:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Run tests
        run: cargo test --verbose

  build:
    if: github.ref == 'refs/heads/main'
    name: Cross-Compile App
    runs-on: ubuntu-latest
    needs: test
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - aarch64-linux-android
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Install cross compile tools
        run: sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf
      - name: Install Android NDK
        if: matrix.target == 'aarch64-linux-android'
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r27d-linux.zip
          unzip -q android-ndk-r27d-linux.zip -d $HOME
          echo "ANDROID_NDK_HOME=$HOME/android-ndk-r27d" >> $GITHUB_ENV
          echo "$HOME/android-ndk-r27d/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
          echo "CC_aarch64_linux_android=$HOME/android-ndk-r27d/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "AR_aarch64_linux_android=$HOME/android-ndk-r27d/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
      - name: Create cross-compile config
        run: |
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.aarch64-linux-android]
          ar = "$HOME/android-ndk-r27d/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
          linker = "$HOME/android-ndk-r27d/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
          EOF
      - name: Install rust target
        run: rustup target add ${{ matrix.target }}
      - name: Run build
        run: cargo build --target ${{ matrix.target }} --release
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: leech-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/leech

  release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: target_artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: target_artifacts/**/*  # Attach everything downloaded
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}